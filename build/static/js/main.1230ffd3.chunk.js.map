{"version":3,"sources":["actions/index.js","containers/Search_bar.js","components/Chart.js","components/Google_map.js","containers/weather_list.js","components/App.js","reportWebVitals.js","reducers/index.js","reducers/reducer_weather.js","index.js"],"names":["Root_url","FETCH_WEATHER","fetchWeather","city","url","request","axios","get","type","payload","SearchBar","props","state","term","onInputChange","bind","onFormChange","event","this","setState","target","value","preventDefault","onSubmit","placeholder","onChange","Component","connect","dispatch","bindActionCreators","height","width","data","color","Math","floor","reduce","total","amount","length","unit","google","window","GoogleMap","maps","Map","refs","map","zoom","center","lat","lng","lon","ref","WeatherList","cityData","temp","list","weather","main","pressure","humidity","coord","className","Chart","name","renderList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","concat","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","store","reducers","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1230ffd3.chunk.js","sourcesContent":["import axios from 'axios';\nconst API_KEY = '29b25605178ac1bc5d95ae5dd0e23683';\nconst Root_url = `http://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\n// const Root_url = `http://api.weatherapi.com/v1/current.json?key=${API_KEY}`;\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\n\nexport function fetchWeather(city){\n\n    const url = `${Root_url}&q=${city},us`;\n\n    const request = axios.get(url);\n    // .then(res => console.log(res));\n\n    return {\n        type:FETCH_WEATHER,\n        payload:request\n    }\n} \n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { bindActionCreators } from 'redux';\n\nimport {fetchWeather} from '../actions/index';\n\n\nclass SearchBar extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {term : ''}\n\n        this.onInputChange = this.onInputChange.bind(this);\n        \n        this.onFormChange = this.onFormChange.bind(this);\n\n\n    }\n\n    onInputChange(event){\n            // console.log(event.target.value);\n            this.setState({term : event.target.value})\n    }\n\n    onFormChange(event){\n        event.preventDefault();\n\n        this.props.fetchWeather(this.state.term);\n\n        this.setState({term: ''})\n        \n    }\n\n    render(){\n\n        return (\n       \n        <div>\n\n            <form onSubmit={this.onFormChange} >\n            <input\n            placeholder=\"Enter a city\"\n            onChange={this.onInputChange}\n            value={this.state.term}\n            // value={this.state.term}\n            />\n            <span>\n                <button\n                type=\"submit\"\n                >Submit</button>\n            </span>\n\n            </form>\n\n        </div>\n\n)\n\n    }\n}\n\nfunction mapDispatchtoProps(dispatch){\n        return bindActionCreators({ fetchWeather },dispatch)\n}\n\n\nexport default connect(null,mapDispatchtoProps)(SearchBar);\n\n","import React from 'react';\nimport { Sparklines,SparklinesLine,SparklinesReferenceLine } from 'react-sparklines';\n\n\nfunction calculate(data){\n    let result=  Math.floor(data.reduce((total,amount)=> total + amount / data.length));\n    return result;\n}\nexport default (props) =>{\n\n        return(\n            <div>\n                 <Sparklines height={20} width={100} data={props.data}>\n                        <SparklinesLine color={props.color} />\n                        <SparklinesReferenceLine type=\"avg\" />\n                    </Sparklines>\n\n                    <div>\n                        {calculate(props.data)} {props.unit}\n                    </div>\n            </div>\n        )\n}","import React, {Component, useRef} from 'react';\n\nconst google = window.google;\nclass GoogleMap extends Component{\n\n\n  componentDidMount(){\n      new google.maps.Map(this.refs.map, {\n          zoom:12,\n          center:{\n              lat:this.props.lat,\n              lng:this.props.lon\n          }\n\n      })\n  }\n\n\n\n\n    render(){\n\n\n        return <div ref=\"map\" />\n        \n    }\n}\n\nexport default GoogleMap;","import React, {Component } from 'react';\n\nimport {connect} from 'react-redux';\nimport Chart from '../components/Chart';\nimport GoogleMap from '../components/Google_map';\n\n\nclass WeatherList extends Component{\n\n    renderList(cityData){\n        const temp = cityData.list.map(weather => weather.main.temp);\n        const pressure = cityData.list.map(weather => weather.main.pressure);\n        const humidity = cityData.list.map(weather => weather.main.humidity);\n        const {lon,lat} = cityData.city.coord;\n\n        return (\n\n            <tr key={cityData.city.name}>\n                <td className=\"googlemap\"> <GoogleMap lon={lon} lat={lat} /> </td>\n                <td><Chart data={temp} color=\"green\" unit=\"K\" /></td>\n                <td><Chart data={pressure} color=\"purple\" unit=\"Kpa\" /></td>\n                <td><Chart data={humidity} color=\"tomato\" unit=\"%\" /></td>\n              \n            </tr>\n        )\n    }\n    render(){\n        return (\n            <table>\n                <thead>\n                  <tr>\n                   <th>City</th>\n                   <th>temperature</th>\n                   <th>Pressure</th>\n                   <th>Humidity</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                    {this.props.weather.map(this.renderList)}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nfunction mapStatetoProps({ weather }){\n    return {\n        weather\n    }\n}\n\nexport default connect(mapStatetoProps)(WeatherList)","// import logo from '../logo.svg';\nimport '../App.css';\nimport SearchBar from '../containers/Search_bar';\nimport WeatherList from '../containers/weather_list';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <WeatherList />\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport Weather from './reducer_weather';\n\nconst rootReducer = combineReducers({\n    // blank: function(state, action) { if (state == null) state = []; return state;}\n    weather:Weather\n        \n});\n\nexport default rootReducer;","import { FETCH_WEATHER }  from '../actions/index';\n\n\nexport default function(state = [], action){\n    // console.log('Action recieved',action);\n    switch (action.type) {\n        case FETCH_WEATHER:\n            // return [ action.payload.data,  ...state ];   \n            return state.concat([action.payload.data]);  \n    }\n\n    return state;\n\n    \n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport ReduxPromise from 'redux-promise';\n\n\n// REDUX\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\n// import store from './redux/store';\n\nReactDOM.render(\n\n  <Provider store={createStoreWithMiddleware(reducers)}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}